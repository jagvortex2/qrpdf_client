{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import FileSaver from 'file-saver';\n// import styles from './QRCodeForm.module.css';\n\n// const QRCodeForm = React.memo(() => {\n//   // State hooks to manage component state\n//   const [articulos, setArticulos] = useState([]); // List of articulo fetched from the server\n//   const [selectedArticulo, setSelectedArticulo] = useState(''); // Currently selected articulo\n//   const [searchText, setSearchText] = useState(''); // Text used for filtering articulo\n//   const [loading, setLoading] = useState(false); // Loading indicator\n//   const [error, setError] = useState(null); // Error message, if any\n\n//   useEffect(() => {\n//     // Effect hook to fetch articulo when the component mounts\n//     const fetchArticulos = async () => {\n//       try {\n//         // Fetches the list of 'articulo' from the server\n//         const response = await axios.get('http://192.168.0.113:5000/articulos');\n//         // Sorts the 'articulo' based on 'Descripcion'\n//         const sortedArticulos = response.data.sort((a, b) => a.DESCRIPCION.localeCompare(b.DESCRIPCION));\n//         // Sets the sorted 'articulo' in the component's state\n//         setArticulos(sortedArticulos);\n//       } catch (error) {\n//         console.error('Error fetching articulo:', error.message);\n//         setError('Error fetching articulo. Please try again.');\n//       }\n//     };\n\n//     // Calls the fetcharticulo function when the component mounts\n//     fetchArticulos();\n//   }, []);\n\n//   // Function to handle the generation and download of a PDF based on the selectedArticulo\n//   const handleGeneratePDF = async () => {\n//     try {\n//       // Sets the loading state to true\n//       setLoading(true);\n\n//       // Makes an API request using Axios to generate PDF\n//       const response = await axios.post(\n//         'http://192.168.0.113:5000/generarpdf',\n//         {\n//           ARTICULO: selectedArticulo.ARTICULO,\n//           DESCRIPCION: selectedArticulo.DESCRIPCION,\n//         },\n//         { responseType: 'blob' } // Sets responseType to 'blob' to receive a Blob\n//       );\n\n//       // Creates a Blob object from the response data\n//       const pdfBlob = new Blob([response.data], { type: 'application/pdf' });\n\n//       // Uses FileSaver.js to trigger the download of the PDF\n//       FileSaver.saveAs(pdfBlob, `${selectedArticulo.ARTICULO}.pdf`);\n\n//       // Resets form fields and loading state\n//       setSelectedArticulo('');\n//       setSearchText('');\n//       setLoading(false);\n//       setError(null);\n//     } catch (error) {\n//       // Handles errors during PDF generation\n//       console.error('Error generating PDF:', error.message);\n//       setError('Error generating PDF. Please try again.');\n//       setLoading(false);\n//     }\n//   };\n\n//   // Function to handle the change of selectedArticulo when an option is selected\n//   const handleArticuloChange = (event) => {\n//     // Finds the selected articulo by matching ARTICULO or DESCRIPCION\n//     const selected = articulos.find(\n//       (articulo) =>\n//         articulo.ARTICULO.toUpperCase() === event.target.value.toUpperCase() ||\n//         articulo.DESCRIPCION.toUpperCase() === event.target.value.toUpperCase()\n//     );\n//     setSelectedArticulo(selected);\n//     setSearchText(''); // Resets the search text when an option is selected\n//   };\n\n//   // Creates a filtered list of articulo based on the searchText\n//   const filteredArticulos = articulos.filter(\n//     (articulo) =>\n//       articulo.ARTICULO.toLowerCase().includes(searchText.toLowerCase()) ||\n//       articulo.DESCRIPCION.toLowerCase().includes(searchText.toLowerCase())\n//   );\n\n//   // Component JSX\n//   return (\n//     <div className={styles.container}>\n//       {/* Form for selecting and generating PDF for an articulo */}\n//       <form className={styles.form}>\n//         {/* Search input for filtering articulos */}\n//         <label className={styles.label}>\n//           Buscar Articulo:\n//           <input\n//             type=\"text\"\n//             value={searchText}\n//             onChange={(e) => setSearchText(e.target.value)}\n//             placeholder=\"Pendiente su funcion\"\n//             disabled={selectedArticulo !== ''}\n//             className={styles.input}\n//           />\n//         </label>\n\n//         {/* Dropdown for selecting an articulo */}\n//         <label className={styles.label}>\n//           Seleccione Articulo:\n//           <select\n//             value={selectedArticulo ? selectedArticulo.DESCRIPCION : ''}\n//             onChange={handleArticuloChange}\n//             className={styles.select}\n//           >\n//             <option value=\"\" disabled>\n//               Seleccione Articulo\n//             </option>\n\n//             {/* Render the sorted options directly */}\n//             {filteredArticulos.map(({ ARTICULO, DESCRIPCION }) => (\n//               <option key={ARTICULO} value={DESCRIPCION}>\n//                 {DESCRIPCION}\n//               </option>\n//             ))}\n//           </select>\n//         </label>\n\n//         {/* Loading and error messages */}\n//         {loading && <p style={{ textAlign: 'center' }}>Cargando...</p>}\n//         {error && <p style={{ color: 'red', textAlign: 'center' }}>{error}</p>}\n\n//         {/* Button to generate PDF */}\n//         <button\n//           type=\"button\"\n//           onClick={handleGeneratePDF}\n//           disabled={loading || !selectedArticulo}\n//           className={styles.button}\n//         >\n//           Generar PDF con viñetas QR\n//         </button>\n//       </form>\n//     </div>\n//   );\n// });\n\n// // Exports the QRCodeForm component as the default export of the module\n// export default QRCodeForm;","map":{"version":3,"names":[],"sources":["C:/Users/Informática/Documents/devs/optionpage/options-app/src/QRCodeForm.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import FileSaver from 'file-saver';\r\n// import styles from './QRCodeForm.module.css';\r\n\r\n// const QRCodeForm = React.memo(() => {\r\n//   // State hooks to manage component state\r\n//   const [articulos, setArticulos] = useState([]); // List of articulo fetched from the server\r\n//   const [selectedArticulo, setSelectedArticulo] = useState(''); // Currently selected articulo\r\n//   const [searchText, setSearchText] = useState(''); // Text used for filtering articulo\r\n//   const [loading, setLoading] = useState(false); // Loading indicator\r\n//   const [error, setError] = useState(null); // Error message, if any\r\n\r\n//   useEffect(() => {\r\n//     // Effect hook to fetch articulo when the component mounts\r\n//     const fetchArticulos = async () => {\r\n//       try {\r\n//         // Fetches the list of 'articulo' from the server\r\n//         const response = await axios.get('http://192.168.0.113:5000/articulos');\r\n//         // Sorts the 'articulo' based on 'Descripcion'\r\n//         const sortedArticulos = response.data.sort((a, b) => a.DESCRIPCION.localeCompare(b.DESCRIPCION));\r\n//         // Sets the sorted 'articulo' in the component's state\r\n//         setArticulos(sortedArticulos);\r\n//       } catch (error) {\r\n//         console.error('Error fetching articulo:', error.message);\r\n//         setError('Error fetching articulo. Please try again.');\r\n//       }\r\n//     };\r\n\r\n//     // Calls the fetcharticulo function when the component mounts\r\n//     fetchArticulos();\r\n//   }, []);\r\n\r\n//   // Function to handle the generation and download of a PDF based on the selectedArticulo\r\n//   const handleGeneratePDF = async () => {\r\n//     try {\r\n//       // Sets the loading state to true\r\n//       setLoading(true);\r\n\r\n//       // Makes an API request using Axios to generate PDF\r\n//       const response = await axios.post(\r\n//         'http://192.168.0.113:5000/generarpdf',\r\n//         {\r\n//           ARTICULO: selectedArticulo.ARTICULO,\r\n//           DESCRIPCION: selectedArticulo.DESCRIPCION,\r\n//         },\r\n//         { responseType: 'blob' } // Sets responseType to 'blob' to receive a Blob\r\n//       );\r\n\r\n//       // Creates a Blob object from the response data\r\n//       const pdfBlob = new Blob([response.data], { type: 'application/pdf' });\r\n\r\n//       // Uses FileSaver.js to trigger the download of the PDF\r\n//       FileSaver.saveAs(pdfBlob, `${selectedArticulo.ARTICULO}.pdf`);\r\n\r\n//       // Resets form fields and loading state\r\n//       setSelectedArticulo('');\r\n//       setSearchText('');\r\n//       setLoading(false);\r\n//       setError(null);\r\n//     } catch (error) {\r\n//       // Handles errors during PDF generation\r\n//       console.error('Error generating PDF:', error.message);\r\n//       setError('Error generating PDF. Please try again.');\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Function to handle the change of selectedArticulo when an option is selected\r\n//   const handleArticuloChange = (event) => {\r\n//     // Finds the selected articulo by matching ARTICULO or DESCRIPCION\r\n//     const selected = articulos.find(\r\n//       (articulo) =>\r\n//         articulo.ARTICULO.toUpperCase() === event.target.value.toUpperCase() ||\r\n//         articulo.DESCRIPCION.toUpperCase() === event.target.value.toUpperCase()\r\n//     );\r\n//     setSelectedArticulo(selected);\r\n//     setSearchText(''); // Resets the search text when an option is selected\r\n//   };\r\n\r\n//   // Creates a filtered list of articulo based on the searchText\r\n//   const filteredArticulos = articulos.filter(\r\n//     (articulo) =>\r\n//       articulo.ARTICULO.toLowerCase().includes(searchText.toLowerCase()) ||\r\n//       articulo.DESCRIPCION.toLowerCase().includes(searchText.toLowerCase())\r\n//   );\r\n\r\n//   // Component JSX\r\n//   return (\r\n//     <div className={styles.container}>\r\n//       {/* Form for selecting and generating PDF for an articulo */}\r\n//       <form className={styles.form}>\r\n//         {/* Search input for filtering articulos */}\r\n//         <label className={styles.label}>\r\n//           Buscar Articulo:\r\n//           <input\r\n//             type=\"text\"\r\n//             value={searchText}\r\n//             onChange={(e) => setSearchText(e.target.value)}\r\n//             placeholder=\"Pendiente su funcion\"\r\n//             disabled={selectedArticulo !== ''}\r\n//             className={styles.input}\r\n//           />\r\n//         </label>\r\n\r\n//         {/* Dropdown for selecting an articulo */}\r\n//         <label className={styles.label}>\r\n//           Seleccione Articulo:\r\n//           <select\r\n//             value={selectedArticulo ? selectedArticulo.DESCRIPCION : ''}\r\n//             onChange={handleArticuloChange}\r\n//             className={styles.select}\r\n//           >\r\n//             <option value=\"\" disabled>\r\n//               Seleccione Articulo\r\n//             </option>\r\n\r\n//             {/* Render the sorted options directly */}\r\n//             {filteredArticulos.map(({ ARTICULO, DESCRIPCION }) => (\r\n//               <option key={ARTICULO} value={DESCRIPCION}>\r\n//                 {DESCRIPCION}\r\n//               </option>\r\n//             ))}\r\n//           </select>\r\n//         </label>\r\n\r\n//         {/* Loading and error messages */}\r\n//         {loading && <p style={{ textAlign: 'center' }}>Cargando...</p>}\r\n//         {error && <p style={{ color: 'red', textAlign: 'center' }}>{error}</p>}\r\n\r\n//         {/* Button to generate PDF */}\r\n//         <button\r\n//           type=\"button\"\r\n//           onClick={handleGeneratePDF}\r\n//           disabled={loading || !selectedArticulo}\r\n//           className={styles.button}\r\n//         >\r\n//           Generar PDF con viñetas QR\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// });\r\n\r\n// // Exports the QRCodeForm component as the default export of the module\r\n// export default QRCodeForm;\r\n"],"mappings},"metadata":{},"sourceType":"module"}